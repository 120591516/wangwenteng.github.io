(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{657:function(e,t,r){"use strict";r.r(t);var o=r(5),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("说明")]),e._v(" "),r("p",[e._v("React Router现在的版本是5, 于2019年3月21日搞笑的发布，"),r("a",{attrs:{href:"https://reacttraining.com/blog/react-router-v5/",target:"_blank",rel:"noopener noreferrer"}},[e._v("搞笑的官网链接"),r("OutboundLink")],1),e._v("， 本来是要发布4.4的版本的，结果成了5。从4开始，使用方式相对于之前版本的思想有所不同。之前版本的思想是传统的思想："),r("strong",[e._v("路由应该统一在一处渲染")]),e._v("， Router 4之后是这样的思想："),r("strong",[e._v("一切皆组件")])])]),e._v(" "),r("p",[e._v("React Router包含了四个包:")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("包名")]),e._v(" "),r("th",[e._v("Description")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[r("a",{attrs:{href:"https://github.com/ReactTraining/react-router/blob/master/packages/react-router",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("react-router")]),r("OutboundLink")],1)]),e._v(" "),r("td",[e._v("React Router核心api")])]),e._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("react-router-dom")]),r("OutboundLink")],1)]),e._v(" "),r("td",[e._v("React Router的DOM绑定，在浏览器中运行不需要额外安装"),r("code",[e._v("react-router")])])]),e._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"https://github.com/ReactTraining/react-router/blob/master/packages/react-router-native",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("react-router-native")]),r("OutboundLink")],1)]),e._v(" "),r("td",[r("a",{attrs:{href:"https://facebook.github.io/react-native/",target:"_blank",rel:"noopener noreferrer"}},[e._v("React Native"),r("OutboundLink")],1),e._v(" 中使用，而实际的应用中，其实不会使用这个。")])]),e._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"https://github.com/ReactTraining/react-router/blob/master/packages/react-router-config",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("react-router-config")]),r("OutboundLink")],1)]),e._v(" "),r("td",[e._v("静态路由的配置")])])])]),e._v(" "),r("p",[e._v("主要使用"),r("code",[e._v("react-router-dom")])]),e._v(" "),r("h2",{attrs:{id:"使用方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[e._v("#")]),e._v(" 使用方式")]),e._v(" "),r("p",[e._v("正常情况下，直接按照"),r("a",{attrs:{href:"https://reacttraining.com/react-router/web/guides/quick-start",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),r("OutboundLink")],1),e._v("的demo就理解 路由的使用方式，有几个点需要特别的强调：")]),e._v(" "),r("ul",[r("li",[e._v("Route组件的exact属性")])]),e._v(" "),r("p",[r("code",[e._v("exact")]),e._v("属性标识是否为严格匹配， 为"),r("code",[e._v("true")]),e._v("是表示严格匹配，为"),r("code",[e._v("false")]),e._v("时为正常匹配。")]),e._v(" "),r("ul",[r("li",[e._v("Route组件的render属性而不是component属性")])]),e._v(" "),r("p",[e._v("怎么在渲染组件的时候，对组件传递属性呢？使用"),r("code",[e._v("component")]),e._v("的方式是不能直接在组件上添加属性的。所以，React Router的"),r("code",[e._v("Route")]),e._v("组件提供了另一种渲染组件的方式 "),r("code",[e._v("render")]),e._v(", 这个常用于页面组件级别的权限管理。")]),e._v(" "),r("ul",[r("li",[e._v("路由的参数传递与获取")]),e._v(" "),r("li",[e._v("Switch组件")])]),e._v(" "),r("p",[e._v("总是渲染第一个匹配到的组件")]),e._v(" "),r("ul",[r("li",[e._v("处理404与默认页")]),e._v(" "),r("li",[e._v("withRoute高阶组件的使用")]),e._v(" "),r("li",[e._v("管理一个项目路由的方法")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://reacttraining.com/react-router/web/guides/code-splitting",target:"_blank",rel:"noopener noreferrer"}},[e._v("code spliting"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("HashRouter和BrowserRouter的区别，前端路由和后端路由的区别。这个在Vue里应该有讲过了。")])]),e._v(" "),r("h2",{attrs:{id:"react-router基本原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-router基本原理"}},[e._v("#")]),e._v(" React Router基本原理")]),e._v(" "),r("p",[e._v("React Router甚至大部分的前端路由都是依赖于"),r("a",{attrs:{href:"https://github.com/browserstate/history.js",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("history.js")]),r("OutboundLink")],1),e._v("的，它是一个独立的第三方js库。可以用来兼容在不同浏览器、不同环境下对历史记录的管理，拥有统一的API。")]),e._v(" "),r("ul",[r("li",[e._v("老浏览器的history: 通过"),r("code",[e._v("hash")]),e._v("来存储在不同状态下的"),r("code",[e._v("history")]),e._v("信息，对应"),r("code",[e._v("createHashHistory")]),e._v("，通过检测"),r("code",[e._v("location.hash")]),e._v("的值的变化，使用"),r("code",[e._v("location.replace")]),e._v("方法来实现url跳转。通过注册监听"),r("code",[e._v("window")]),e._v("对象上的"),r("code",[e._v("hashChange")]),e._v("事件来监听路由的变化，实现历史记录的回退。")]),e._v(" "),r("li",[e._v("高版本浏览器: 利用HTML5里面的history，对应"),r("code",[e._v("createBrowserHistory")]),e._v(", 使用包括"),r("code",[e._v("pushState")]),e._v("， "),r("code",[e._v("replaceState")]),e._v("方法来进行跳转。通过注册监听"),r("code",[e._v("window")]),e._v("对象上的"),r("code",[e._v("popstate")]),e._v("事件来监听路由的变化，实现历史记录的回退。")]),e._v(" "),r("li",[e._v("node环境下: 在内存中进行历史记录的存储，对应"),r("code",[e._v("createMemoryHistory")]),e._v("。直接在内存里"),r("code",[e._v("push")]),e._v("和"),r("code",[e._v("pop")]),e._v("状态。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);