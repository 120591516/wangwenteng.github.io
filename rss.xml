<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[腾哥的学习笔记]]></title><description><![CDATA[~~~学习过程中笔记心得整理~~~]]></description><link>http://github.com/dylang/node-rss</link><generator>RSS for Node</generator><lastBuildDate>Sat, 25 Jun 2022 09:21:49 GMT</lastBuildDate><atom:link href="undefined/rss.xml" rel="self" type="application/rss+xml"/><copyright><![CDATA[腾哥聊编程]]></copyright><language><![CDATA[en]]></language><item><title><![CDATA[test]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>testing</p>
</div>
]]></description><link>undefined/docker/</link><guid isPermaLink="true">undefined/docker/</guid><category><![CDATA[go语言介绍]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Sat, 25 Jun 2022 16:00:17 GMT</pubDate></item><item><title><![CDATA[gin框架路由拆分与注册]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>本文总结了我平时在项目中积累的关于gin框架路由拆分与注册的若干方法。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/03go_gin_routes_registry.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/03go_gin_routes_registry.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[Gin框架介绍及使用]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p><code>Gin</code>是一个用Go语言编写的web框架。它是一个类似于<code>martini</code>但拥有更好性能的API框架, 由于使用了<code>httprouter</code>，速度提高了近40倍。 如果你是性能和高效的追求者, 你会爱上<code>Gin</code>。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/02go_gin.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/02go_gin.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[在gin框架中使用JWT]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>JWT全称JSON Web Token是一种跨域认证解决方案，属于一个开放的标准，它规定了一种Token实现方式，目前多用于前后端分离项目和OAuth2.0业务场景下。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/04go_json-web-token.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/04go_json-web-token.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[Cookie和Session]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>Cookie和Session是Web开发绕不开的一个环节，本文介绍了Cookie和Session的原理及在Go语言中如何操作Cookie。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/08Cookie_Session.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/08Cookie_Session.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[优雅地关机或重启]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>我们编写的Web项目部署之后，经常会因为需要进行配置变更或功能迭代而重启服务，单纯的<code>kill -9 pid</code>的方式会强制关闭进程，这样就会导致服务端当前正在处理的请求失败，那有没有更优雅的方式来实现关机或重启呢？</p>
<blockquote>
<p>阅读本文需要了解一些UNIX系统中<code>信号</code>的概念，请提前查阅资料预习。</p>
</blockquote>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/06graceful_shutdown.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/06graceful_shutdown.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[如何使用Docker部署Go Web应用]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>本文介绍了如何使用<code>Docker</code>以及<code>Docker Compose</code>部署我们的 Go Web 程序。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/07how_to_deploy_app_by_docker.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/07how_to_deploy_app_by_docker.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[gin框架源码解析]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>通过阅读gin框架的源码来探究gin框架路由与中间件的秘密。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/10read_gin_sourcecode.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/10read_gin_sourcecode.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[使用swagger生成接口文档]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>有时候一份清晰明了的接口文档能够极大地提高前后端双方的沟通效率和开发效率。本文将介绍如何使用swagger生成接口文档。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/12gin_swagger.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/12gin_swagger.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[使用zap接收gin框架默认的日志并配置日志归档]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>本文介绍了在基于gin框架开发的项目中如何配置并使用zap来接收并记录gin框架默认的日志和如何配置日志归档。</p>
<p>我们在基于gin框架开发项目时通常都会选择使用专业的日志库来记录项目中的日志，go语言常用的日志库有<code>zap</code>、<code>logrus</code>等。网上也有很多类似的教程，我之前也翻译过一篇<a href="https://www.liwenzhou.com/posts/Go/zap/" target="_blank" rel="noopener noreferrer">《在Go语言项目中使用Zap日志库》<OutboundLink/></a>。</p>
<p>但是我们该如何在日志中记录gin框架本身输出的那些日志呢？</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/09use_zap_in_gin.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/09use_zap_in_gin.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[常用限流策略——漏桶与令牌桶介绍]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>限流又称为流量控制（流控），通常是指限制到达系统的并发请求数，本文列举了常见的限流策略，并以gin框架为例演示了如何为项目添加限流组件。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/14ratelimit.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/14ratelimit.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[部署Go语言项目的 N 种方法]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>本文以部署 Go Web 程序为例，介绍了在 CentOS7 服务器上部署 Go 语言程序的若干方法。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/15deploy_go_app.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/15deploy_go_app.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[使用Air实现Go程序实时热重载]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>今天我们要介绍一个神器——Air能够实时监听项目的代码文件，在代码发生变更之后自动重新编译并执行，大大提高gin框架项目的开发效率。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/05go_live_reload_with_air.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/05go_live_reload_with_air.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[常用的HTTP服务压测工具介绍]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>在项目正式上线之前，我们通常需要通过压测来评估当前系统能够支撑的请求量、排查可能存在的隐藏bug，同时了解了程序的实际处理能力能够帮我们更好的匹配项目的实际需求，节约资源成本。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/13benchmark_tool.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/13benchmark_tool.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[validator库参数校验若干实用技巧]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>本文介绍了使用validator库做参数校验的一些十分实用的使用技巧，包括翻译校验错误提示信息、自定义提示信息的字段名称、自定义校验方法等。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/11validator_usages.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/11validator_usages.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:26:17 GMT</pubDate></item><item><title><![CDATA[Go语言标准库之http/template]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p><code>html/template</code>包实现了数据驱动的模板，用于生成可防止代码注入的安全的HTML内容。它提供了和<code>text/template</code>包相同的接口，Go语言中输出HTML的场景都应使用<code>html/template</code>这个包。</p>
</div>
]]></description><link>undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/01go_template.html</link><guid isPermaLink="true">undefined/golang/Web%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/01go_template.html</guid><category><![CDATA[go web开发相关]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:06:35 GMT</pubDate></item><item><title><![CDATA[你需要知道的那些go语言json技巧]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>本文总结了我平时在项目中遇到的那些关于go语言中数据与JSON格式之间相互转换的问题及解决办法。</p>
</div>
]]></description><link>undefined/golang/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8A%80%E5%B7%A7/01json-tricks.html</link><guid isPermaLink="true">undefined/golang/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8A%80%E5%B7%A7/01json-tricks.html</guid><category><![CDATA[go 常用组件和技巧]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:06:35 GMT</pubDate></item><item><title><![CDATA[Go语言设计模式之函数式选项模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>本文主要介绍了Go语言中函数式选项模式及该设计模式在实际编程中的应用。</p>
</div>
]]></description><link>undefined/golang/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8A%80%E5%B7%A7/02option.html</link><guid isPermaLink="true">undefined/golang/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8A%80%E5%B7%A7/02option.html</guid><category><![CDATA[go 常用组件和技巧]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:06:35 GMT</pubDate></item><item><title><![CDATA[结构体转map的若干方法]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>本文介绍了Go语言中将结构体转成<code>map[string]interface{}</code>时你需要了解的“坑”，也有你需要知道的若干方法。</p>
<p>我们在Go语言中通常使用结构体来保存我们的数据，例如要存储用户信息，我们可能会定义如下结构体：</p>
<!--beforebegin--><div class="language-go line-numbers-mode"><!--afterbegin--><pre v-pre class="language-go"><code><span class="token comment">// UserInfo 用户信息</span>
<span class="token keyword">type</span> UserInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>
	Age  <span class="token builtin">int</span>    <span class="token string">`json:"age"`</span>
<span class="token punctuation">}</span>

u1 <span class="token operator">:=</span> UserInfo<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"q1mi"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
</code></pre>
<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div><!--beforeend--></div><!--afterend--><p>假设现在要将上面的<code>u1</code>转换成<code>map[string]interface{}</code>，该如何操作呢？</p>
</div>
]]></description><link>undefined/golang/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8A%80%E5%B7%A7/04struct2map.html</link><guid isPermaLink="true">undefined/golang/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8A%80%E5%B7%A7/04struct2map.html</guid><category><![CDATA[go 常用组件和技巧]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:06:35 GMT</pubDate></item><item><title><![CDATA[Go语言中的单例模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>在过去的几年中，Go语言的发展是惊人的，并且吸引了很多由其他语言（Python、PHP、Ruby）转向Go语言的跨语言学习者。 Go语言太容易实现并发了，以至于它在很多地方被不正确的使用了。</p>
</div>
]]></description><link>undefined/golang/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8A%80%E5%B7%A7/03singleton_in_go.html</link><guid isPermaLink="true">undefined/golang/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8A%80%E5%B7%A7/03singleton_in_go.html</guid><category><![CDATA[go 常用组件和技巧]]></category><dc:creator><![CDATA[腾哥]]></dc:creator><pubDate>Wed, 22 Jun 2022 14:06:35 GMT</pubDate></item></channel></rss>